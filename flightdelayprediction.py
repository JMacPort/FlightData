# -*- coding: utf-8 -*-
"""FlightDelayPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zFRG3gMkIjqdJ2mYwHkDpAXAPjeX5xy8
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from ipywidgets import interact, interactive, fixed, widgets, Layout, Box, VBox, HBox
from IPython.display import display, HTML, clear_output

# Load and prepare the data
def load_data():
    url = "https://raw.githubusercontent.com/JMacPort/FlightData/refs/heads/main/airlines_delay.csv"
    df = pd.read_csv(url)
    return df

def preprocess_data(df):
    df_processed = df[['Airline', 'AirportFrom', 'Class']].copy()

    le_airline = LabelEncoder()
    le_airport = LabelEncoder()
    df_processed['Airline'] = le_airline.fit_transform(df_processed['Airline'])
    df_processed['AirportFrom'] = le_airport.fit_transform(df_processed['AirportFrom'])

    return df_processed, le_airline, le_airport

# Visualizations
def create_visualizations(df):
    fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(24, 6))

    # Delays by Airline
    df_grouped = df.groupby('Airline')['Class'].value_counts(normalize=True).unstack()
    df_grouped.plot(kind='bar', stacked=True, ax=ax1)
    ax1.set_title('Delays by Airline', fontsize=16)
    ax1.set_xlabel('Airline', fontsize=12)
    ax1.set_ylabel('Proportion', fontsize=12)
    ax1.tick_params(axis='x', rotation=45)
    ax1.legend(['No Delay', 'Delay'], fontsize=10)

    # Delays by Top 10 Airports
    top_10_airports = df['AirportFrom'].value_counts().nlargest(10).index
    df_top_10 = df[df['AirportFrom'].isin(top_10_airports)]
    df_grouped = df_top_10.groupby('AirportFrom')['Class'].value_counts(normalize=True).unstack()
    df_grouped.plot(kind='bar', stacked=True, ax=ax2)
    ax2.set_title('Delays by Top 10 Airports', fontsize=16)
    ax2.set_xlabel('Airport', fontsize=12)
    ax2.set_ylabel('Proportion', fontsize=12)
    ax2.tick_params(axis='x', rotation=45)
    ax2.legend(['No Delay', 'Delay'], fontsize=10)

    # Heatmap of Delay Probabilities
    delay_prob = df.groupby(['Airline', 'AirportFrom'])['Class'].mean().unstack()
    sns.heatmap(delay_prob, ax=ax3, cmap='YlOrRd', annot=False)
    ax3.set_title('Delay Probability Heatmap', fontsize=16)
    ax3.set_xlabel('Airport', fontsize=12)
    ax3.set_ylabel('Airline', fontsize=12)

    plt.tight_layout()
    plt.show()

# Train the model
def train_model(X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
    model = DecisionTreeClassifier(random_state=0)
    model.fit(X_train, y_train)
    return model, X_test, y_test

# Evaluate the model
def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    cm = confusion_matrix(y_test, y_pred)
    report = classification_report(y_test, y_pred)
    return accuracy, cm, report

# Predict delay
def predict_delay(model, airline_encoded, airport_encoded):
    input_data = pd.DataFrame([[airline_encoded, airport_encoded]], columns=['Airline', 'AirportFrom'])
    prediction = model.predict(input_data)
    return "Delayed" if prediction[0] == 1 else "Not Delayed"

# Styling
style = """
<style>
    .widget-dropdown {
        width: 300px !important;
    }
    .widget-button {
        width: 150px !important;
        background-color: #4CAF50 !important;
        color: white !important;
        font-weight: bold !important;
    }
    .prediction-output {
        font-size: 18px;
        margin-top: 20px;
        padding: 10px;
        border-radius: 5px;
    }
    .delayed {
        background-color: #ffcccb;
        border: 2px solid #ff0000;
    }
    .not-delayed {
        background-color: #90EE90;
        border: 2px solid #008000;
    }
</style>
"""

# Main function
def main():
    display(HTML(style))
    display(HTML("<h1 style='color: #4a4a4a;'>‚úàÔ∏è Airline Delay Prediction App</h1>"))

    df = load_data()
    df_processed, le_airline, le_airport = preprocess_data(df)

    display(HTML("<h2 style='color: #4a4a4a;'>üìä Data Visualizations</h2>"))
    create_visualizations(df)

    X = df_processed[['Airline', 'AirportFrom']]
    y = df_processed['Class']
    model, X_test, y_test = train_model(X, y)

    accuracy, cm, report = evaluate_model(model, X_test, y_test)

    display(HTML("<h2 style='color: #4a4a4a;'>üéØ Model Evaluation</h2>"))
    print(f"Accuracy: {accuracy:.2f}")
    print("Confusion Matrix:")
    print(cm)
    print("Classification Report:")
    print(report)

    display(HTML("<h2 style='color: #4a4a4a;'>üîÆ Predict Flight Delay</h2>"))

    airline_options = list(le_airline.classes_)
    airport_options = list(le_airport.classes_)

    def predict_wrapper(airline, airport):
        try:
            airline_encoded = le_airline.transform([airline])[0]
            airport_encoded = le_airport.transform([airport])[0]
            result = predict_delay(model, airline_encoded, airport_encoded)
            return f"<div class='prediction-output {'delayed' if result == 'Delayed' else 'not-delayed'}'><strong>Prediction:</strong> Flight from {airline} departing from {airport} is <strong>{result}</strong></div>"
        except Exception as e:
            return f"<div class='prediction-output' style='background-color: #ffcccb; border: 2px solid #ff0000;'><strong>Error:</strong> {str(e)}</div>"

    airline_dropdown = widgets.Dropdown(options=airline_options, description='Airline:', layout=Layout(width='300px'))
    airport_dropdown = widgets.Dropdown(options=airport_options, description='Airport:', layout=Layout(width='300px'))

    predict_button = widgets.Button(description="Predict", layout=Layout(width='150px'))
    predict_button.add_class('widget-button')
    output = widgets.Output()

    def on_button_clicked(_):
        with output:
            clear_output()
            display(HTML(predict_wrapper(airline_dropdown.value, airport_dropdown.value)))

    predict_button.on_click(on_button_clicked)

    # Layout
    input_box = VBox([airline_dropdown, airport_dropdown, predict_button], layout=Layout(align_items='center'))
    display(input_box, output)

# Run the main function
if __name__ == "__main__":
    main()